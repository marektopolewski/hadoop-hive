package task1;
/**
 * Reducer class for TopKStores program
 * Takes pairs generated by the mapper and outputs a list of top K stores
 *
 * @author	Vlad Herghelegiu	u1600967
 * @author	Marek Topolewski	u1633084
 */

import java.io.IOException;
import java.util.TreeMap;
import java.util.Collections;
import java.util.Map;

import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class TopKReducer extends Reducer<Text, FloatWritable, Text, FloatWritable> {
	
	// TreeMap structure ordered by its key, at any state stores up to K stores with highest net profit
	// The reverseOrder() method allows for descending ordering of pairs by the key.
    private TreeMap<FloatWritable, Text> topStores = new TreeMap<>(Collections.reverseOrder());
    
	@Override
	protected void reduce(Text key, Iterable<FloatWritable> values, Context context)
			throws IOException, InterruptedException {
		
		// current sum of net profit for the store with key 'key'
		float sum = 0;
		
		// iterate through all values for the given store generated by the mapper
		for (FloatWritable net : values) {
			sum += net.get();
		}
		
		// retrieve the max number of stores to display (k)
		int k = context.getConfiguration().getInt("k", 1);
		
		// add to the tree a pair of the net profit and the corresponding store id
		// this order allows for auto-balancing of the tree based on the profit
		topStores.put(new FloatWritable(sum), new Text(key));
		
		// if tree size exceeds k, remove the pair with the smallest net profit
		if (topStores.size() > k) topStores.remove(topStores.lastKey());
	}
	
	@Override
	// method executed once, after reducers are finished and before the destructor
	protected void cleanup(Context context) throws IOException, InterruptedException {
		
		// TreeMap ensures correct order of stores by their profit, hence, it is
		// sufficient to write them into the output by traversing the data structure
		for(Map.Entry<FloatWritable, Text> entry : topStores.entrySet()) {
			FloatWritable net = entry.getKey();
			Text store_id = entry.getValue();
			context.write(store_id, net);
		}
		
		// call the default 'cleanup' method for the Reducer
		super.cleanup(context);
	}
}